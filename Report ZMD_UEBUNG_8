*&---------------------------------------------------------------------*
*& Report ZMD_UEBUNG_8
*&---------------------------------------------------------------------*
*&ALV-First Combınatıon.
*&Der Zweck dieses Codes besteht darin, eine interaktive Benutzeroberfläche bereitzustellen,
*&um Fahrzeugdaten anzuzeigen (eine ALV-Liste zu erstellen), zu sortieren und zu bearbeiten.
*&Erstellung einer neuen Spalte mit dem Namen BOX in der Datenbanktabelle,
*&Definition eines Fieldkatalogs
*&---------------------------------------------------------------------*
REPORT zmd_uebung_08.

"Es wird eine neue Typ-Definition (gty_table) erstellt,
"die eine neue Spalte namens BOX zur Zeilenstruktur der Tabelle zmd_table_001 einschließt.
TYPES: BEGIN OF gty_table,
         box.
         INCLUDE STRUCTURE zmd_table_001.
       TYPES: END OF gty_table.

"erschiedene Variablen und Tabellen für die Datenverarbeitung und -anzeige werden deklariert.
DATA: gt_table        TYPE TABLE OF gty_table,
      gt_selected     TYPE TABLE OF gty_table,
      gs_selected     TYPE gty_table,
      gt_fieldcat     TYPE slis_t_fieldcat_alv,
      gs_fieldcat     TYPE slis_fieldcat_alv,
      gt_fieldcat_sel TYPE slis_t_fieldcat_alv,
      gs_layout       TYPE slis_layout_alv,
      gv_answer       TYPE c LENGTH 1,
      gv_new_e_mail   TYPE c LENGTH 80.

"Hier beginnt der eigentliche Verarbeitungsteil des Programms.

START-OF-SELECTION.

  "Erstens: Ich habe die gesamten Daten gelesen.
  SELECT * FROM zmd_table_001 INTO CORRESPONDING FIELDS OF TABLE gt_table.

  "Ein Fieldkatalog wird basierend auf der Struktur der Tabelle zmd_table_001 erstellt.
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZMD_TABLE_001'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  IF sy-subrc IS NOT INITIAL.
    EXIT.
  ENDIF.

  "Ich verwandle die gesamte E_MAIL-Spalte auf ALV in HOTSPOT.
  "Die E-Mail-Spalte wird als Hotspot markiert, um Benutzereingaben zu ermöglichen.
  LOOP AT gt_fieldcat INTO gs_fieldcat.
    CASE gs_fieldcat-fieldname.
      WHEN 'E_MAIL'.
        gs_fieldcat-hotspot = abap_true.
        MODIFY gt_fieldcat FROM gs_fieldcat TRANSPORTING hotspot WHERE fieldname = 'E_MAIL'.
    ENDCASE.
  ENDLOOP.

  "Ich mache die erforderlichen Anpassungen am Layout.
  gs_layout-zebra             = abap_true.
  gs_layout-colwidth_optimize = abap_true.
  gs_layout-box_fieldname     = 'BOX'.

  "Ich zeige ALV auf dem Bildschirm mit meinem PF-Status und User Command.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      is_layout                = gs_layout
      it_fieldcat              = gt_fieldcat
      i_callback_pf_status_set = 'DM_PF_STATUS'
      i_callback_user_command  = 'DM_USER_COMMAND'
    TABLES
      t_outtab                 = gt_table
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

FORM dm_pf_status USING lt_extab TYPE slis_t_extab.
  SET PF-STATUS 'DM_PF_STATUS_01'.
ENDFORM.

FORM dm_user_command USING lv_ucomm    TYPE sy-ucomm
                           ls_selfield TYPE slis_selfield.

  CASE lv_ucomm.
      "Ich sorge dafür, dass der Bericht beendet wird, wenn die Taste LEAVE gedrückt wird.
    WHEN 'LEAVE'.
      LEAVE PROGRAM.
      "Wenn die Schaltfläche SORT_BY_NAME gedrückt wird, biete ich eine alphabetische Sortierung nach Namen an.
    WHEN 'SORT_BY_NAME'.
      SORT gt_table BY name ASCENDING.

      "Verschiedene Anpassungen am Layout werden vorgenommen, z.B. Zebra-Streifen und Optimierung der Spaltenbreite.
      CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
        EXPORTING
          i_callback_program       = sy-repid
          is_layout                = gs_layout
          it_fieldcat              = gt_fieldcat
          i_callback_pf_status_set = 'DM_PF_STATUS'
          i_callback_user_command  = 'DM_USER_COMMAND'
        TABLES
          t_outtab                 = gt_table
        EXCEPTIONS
          program_error            = 1
          OTHERS                   = 2.
      "Wenn die ID doppelt angeklickt wird, zeige ich dem Benutzer die gesamte Zeile als POPUP an und biete ihm die Möglichkeit, Änderungen vorzunehmen.
      "Zelle "SALARY / GEHALT" wurde aufgrund eines SAP-Fehlers nicht änderbar gemacht.
      "Wenn ein Doppelklick auf die E-Mail-Zelle gemacht wird, erhalte ich eine neue E-Mail-Adresse vom Benutzer und aktualisiere die Datenbanktabelle.
    WHEN '&IC1'.
      IF ls_selfield-fieldname = 'ID'.
        SELECT * FROM zmd_table_001
          INTO CORRESPONDING FIELDS OF TABLE gt_selected
        WHERE id = ls_selfield-value.

        LOOP AT gt_fieldcat INTO gs_fieldcat.
          IF gs_fieldcat-key IS INITIAL AND gs_fieldcat-fieldname NE 'SALARY'.
            gs_fieldcat-edit  = abap_true.
            gs_fieldcat-input = abap_true.
          ENDIF.

          APPEND gs_fieldcat TO gt_fieldcat_sel.
          CLEAR: gs_fieldcat.
        ENDLOOP.

        CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
          EXPORTING
            i_title               = TEXT-001
            i_screen_start_column = 5
            i_screen_start_line   = 5
            i_screen_end_column   = 165
            i_screen_end_line     = 8
            i_tabname             = 'GT_SELECTED'
            it_fieldcat           = gt_fieldcat_sel
            i_callback_program    = sy-repid
          IMPORTING
            e_exit                = gv_answer
          TABLES
            t_outtab              = gt_selected
          EXCEPTIONS
            program_error         = 1
            OTHERS                = 2.

        IF gv_answer IS INITIAL.
          READ TABLE gt_selected INTO gs_selected INDEX 1.
          IF sy-subrc IS INITIAL.
            UPDATE zmd_table_001 SET name    = gs_selected-name
                                     surname = gs_selected-surname
                                     job     = gs_selected-job
                                     salary  = gs_selected-salary
                                     curr    = gs_selected-curr
                                     gsm     = gs_selected-gsm
                                     e_mail  = gs_selected-e_mail
                               WHERE id = gs_selected-id.

            SELECT * FROM zmd_table_001 INTO CORRESPONDING FIELDS OF TABLE gt_table.

            CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
              EXPORTING
                i_callback_program       = sy-repid
                is_layout                = gs_layout
                it_fieldcat              = gt_fieldcat
                i_callback_pf_status_set = 'DM_PF_STATUS'
                i_callback_user_command  = 'DM_USER_COMMAND'
              TABLES
                t_outtab                 = gt_table
              EXCEPTIONS
                program_error            = 1
                OTHERS                   = 2.

          ENDIF.
        ENDIF.
      ELSEIF ls_selfield-fieldname = 'E_MAIL'.
        CALL FUNCTION 'ZMD_POPUP_GET_E_MAIL'
          IMPORTING
            ev_e_mail = gv_new_e_mail
            ev_answer = gv_answer.

        IF gv_answer = 0 AND gv_new_e_mail IS NOT INITIAL.
          UPDATE zmd_table_001 SET   e_mail = gv_new_e_mail
                               WHERE e_mail = ls_selfield-value.
        ENDIF.

        SELECT * FROM zmd_table_001 INTO CORRESPONDING FIELDS OF TABLE gt_table.

        CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
          EXPORTING
            i_callback_program       = sy-repid
            is_layout                = gs_layout
            it_fieldcat              = gt_fieldcat
            i_callback_pf_status_set = 'DM_PF_STATUS'
            i_callback_user_command  = 'DM_USER_COMMAND'
          TABLES
            t_outtab                 = gt_table
          EXCEPTIONS
            program_error            = 1
            OTHERS                   = 2.
      ENDIF.
  ENDCASE.
ENDFORM.
