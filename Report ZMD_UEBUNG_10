*&---------------------------------------------------------------------*
*& Report ZMD_UEBUNG_10
*&---------------------------------------------------------------------*
*&Lokale Klasse
*&Dieser Code definiert eine lokale Klasse lcl_update_name, die Methoden zur Überprüfung
*&und Aktualisierung von Datenbankwerten enthält. Zusammenfassend dient dieser Code dazu,
*&die Gültigkeit von Benutzereingaben zu überprüfen und
*&den Namen eines Reisebüros in der Datenbank zu aktualisieren.
*&---------------------------------------------------------------------*
REPORT zmd_uebung_10.

"Ich definiere eine lokale Klasse. Alle Methodennamen, Attribute und exceptions werden hier aufgeführt.
"Klassendefinition: Die Klasse lcl_update_name definiert zwei Klassenmethoden check_id und check_name,
"die jeweils die Agenturnummer und den Namen überprüfen. Die Methode update_name aktualisiert den Namen
"des Reisebüros in der Datenbanktabelle zdm_stravelag.
CLASS lcl_update_name DEFINITION.

  PUBLIC SECTION.
    CLASS-METHODS update_name IMPORTING iv_agencynum     TYPE s_agncynum
                                        iv_name          TYPE string
                              RETURNING VALUE(rv_upd_ok) TYPE boolean.

  PROTECTED SECTION.
    CLASS-METHODS:  check_id IMPORTING  iv_agencynum TYPE s_agncynum
                             EXCEPTIONS no_data,
      check_name IMPORTING  iv_name      TYPE string
                 RETURNING  VALUE(rv_ok) TYPE boolean
                 EXCEPTIONS new_name_empty too_long_name.
ENDCLASS.

"Ich kodiere, welche Aktionen in den Methoden durchgeführt werden sollen.
CLASS lcl_update_name IMPLEMENTATION.

  "Die Methode, die überprüft, ob ein Datensatz entsprechend der eingegebenen Daten vorhanden ist oder nicht.
  "Diese Methode überprüft, ob ein Datensatz mit der gegebenen Agenturnummer in der Datenbank vorhanden ist.
  "Wenn nicht, wird die Ausnahme no_data ausgelöst.
  METHOD check_id.

    DATA: ls_stravelag TYPE zdm_stravelag.

    SELECT SINGLE * FROM zdm_stravelag
      INTO ls_stravelag
      WHERE agencynum = iv_agencynum.

    IF ls_stravelag IS INITIAL.
      RAISE no_data.
    ENDIF.

  ENDMETHOD.

  "Die Methode, die überprüft, ob der neu eingegebene Name mehr als 25 Zeichen lang ist.
  "Diese Methode überprüft, ob der neue eingegebene Name nicht leer ist und nicht mehr als 25 Zeichen enthält.
  "Wenn der Name leer ist oder die maximale Länge überschreitet, werden entsprechende Ausnahmen (new_name_empty,
  "too_long_name) ausgelöst.
  METHOD check_name.

    DATA: lv_number_of_char TYPE i.

    IF iv_name IS INITIAL.
      RAISE new_name_empty.
    ENDIF.

    lv_number_of_char = strlen( iv_name ).

    IF lv_number_of_char > 25.
      RAISE too_long_name.
    ENDIF.

    rv_ok = abap_true.

  ENDMETHOD.

  "Die Methode, die eine Aktualisierung in der Datenbanktabelle durchführt.
  "Diese Methode ruft zuerst die check_id-Methode auf, um zu überprüfen,
  "ob der Datensatz vorhanden ist. Dann wird die check_name-Methode aufgerufen,
  "um den neuen Namen zu validieren. Wenn beide Überprüfungen erfolgreich sind,
  "wird der Name in der Datenbanktabelle aktualisiert.
  METHOD update_name.

    DATA: lv_ok TYPE c LENGTH 1.

    check_id(
      EXPORTING
        iv_agencynum = iv_agencynum
      EXCEPTIONS
        no_data      = 1
        OTHERS       = 2 ).

    IF sy-subrc IS NOT INITIAL.
      MESSAGE TEXT-001 TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    check_name(
      EXPORTING
        iv_name        =  iv_name
      RECEIVING
        rv_ok          =  lv_ok
      EXCEPTIONS
        new_name_empty = 1
        too_long_name  = 2
        OTHERS         = 3 ).

    "Die Methode, die eine alternative Verwendung ermöglicht.
*    lv_ok = check_name(  EXPORTING iv_name = iv_name ).

    IF sy-subrc = 1.
      MESSAGE TEXT-002 TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ELSEIF sy-subrc = 2.
      MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    IF lv_ok IS NOT INITIAL.
      UPDATE zdm_stravelag SET   name      = iv_name
                           WHERE agencynum = iv_agencynum.
      IF sy-subrc IS INITIAL.
        rv_upd_ok = abap_true.
      ENDIF.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

"Ich definiere zwei Parameter, um die Agenturnummer und den Namen des Reisebüros vom Benutzer zu erhalten.
PARAMETERS: p_agnum TYPE s_agncynum OBLIGATORY,
            p_name  TYPE string LOWER CASE.

DATA: gv_ok TYPE c LENGTH 1.

"Hier werden die Parameter p_agnum und p_name definiert, um die Agenturnummer und den neuen Namen
"vom Benutzer zu erhalten. Dann wird die Methode update_name aufgerufen, um die Aktualisierung basierend
"auf den Benutzereingaben durchzuführen.

START-OF-SELECTION.

  "Ich führe die Aktualisierung basierend auf den vom Benutzer erhaltenen Daten durch.
  lcl_update_name=>update_name(
    EXPORTING
      iv_agencynum = p_agnum
      iv_name      = p_name
    RECEIVING
      rv_upd_ok    = gv_ok ).
